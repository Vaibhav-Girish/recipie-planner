import customtkinter as ctk
import mysql.connector
from tkinter import messagebox

# Canva Design Color Palette
CREAM = "#F5F5DC"
SAGE_GREEN = "#A8C69F"
DARK_GREEN = "#7A9E72"
TEAL = "#3D6B5E"
PURPLE = "#8B7BC5"
WHITE = "#FFFFFF"

ctk.set_appearance_mode("light")

class DatabaseManager:
    def __init__(self):
        self.connection = mysql.connector.connect(
            host='localhost', database='recipe_planner', user='root', password='root'
        )
        self._execute("""CREATE TABLE IF NOT EXISTS recipes (
            recipe_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL,
            ingredients TEXT NOT NULL, instructions TEXT NOT NULL,
            category VARCHAR(100), cuisine VARCHAR(100), cook_time INT)""")
        self._execute("""CREATE TABLE IF NOT EXISTS mealplan (
            plan_id INT AUTO_INCREMENT PRIMARY KEY, day VARCHAR(20), meal_type VARCHAR(20),
            recipe_id INT, FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id) ON DELETE CASCADE)""")

    def _execute(self, query, params=None, fetch=False):
        cursor = self.connection.cursor()
        cursor.execute(query, params or ())
        result = cursor.fetchall() if fetch else self.connection.commit()
        cursor.close()
        return result

    def insert_recipe(self, name, ing, inst, cat, cui="", time=0):
        self._execute("INSERT INTO recipes (name, ingredients, instructions, category, cuisine, cook_time) VALUES (%s,%s,%s,%s,%s,%s)",
                     (name, ing, inst, cat, cui, time))

    def get_recipes(self, search="", stype="name"):
        if not search:
            return self._execute("SELECT * FROM recipes", fetch=True)
        queries = {"name": "name LIKE %s", "category": "category LIKE %s", "ingredient": "ingredients LIKE %s"}
        return self._execute(f"SELECT * FROM recipes WHERE {queries[stype]}", (f"%{search}%",), fetch=True)

    def update_recipe(self, rid, name, ing, inst, cat, cui="", time=0):
        self._execute("UPDATE recipes SET name=%s, ingredients=%s, instructions=%s, category=%s, cuisine=%s, cook_time=%s WHERE recipe_id=%s",
                     (name, ing, inst, cat, cui, time, rid))

    def delete_recipe(self, rid):
        self._execute("DELETE FROM recipes WHERE recipe_id = %s", (rid,))

    def add_meal(self, day, meal, rid):
        self._execute("DELETE FROM mealplan WHERE day=%s AND meal_type=%s", (day, meal))
        self._execute("INSERT INTO mealplan (day, meal_type, recipe_id) VALUES (%s,%s,%s)", (day, meal, rid))

    def get_meals(self):
        return self._execute("""SELECT mp.day, mp.meal_type, r.name, r.recipe_id FROM mealplan mp
            JOIN recipes r ON mp.recipe_id = r.recipe_id
            ORDER BY FIELD(mp.day, 'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'),
            FIELD(mp.meal_type, 'Breakfast','Lunch','Dinner')""", fetch=True)

    def remove_meal(self, day, meal):
        self._execute("DELETE FROM mealplan WHERE day=%s AND meal_type=%s", (day, meal))

    def get_shopping_list(self):
        results = self._execute("SELECT DISTINCT r.ingredients FROM mealplan mp JOIN recipes r ON mp.recipe_id=r.recipe_id", fetch=True)
        ingredients = set()
        for row in results:
            ingredients.update(i.strip() for i in row[0].split(',') if i.strip())
        return sorted(ingredients)


class RecipePlannerApp:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Recipe Planner")
        self.root.geometry("1400x900")
        self.root.configure(fg_color=CREAM)
        self.db = DatabaseManager()
        self.current_recipe = None
        
        # Main container with purple border
        main = ctk.CTkFrame(self.root, fg_color=CREAM, border_color=PURPLE, border_width=6, corner_radius=15)
        main.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Sidebar (teal)
        sidebar = ctk.CTkFrame(main, width=100, fg_color=TEAL, corner_radius=0)
        sidebar.pack(side="left", fill="y")
        sidebar.pack_propagate(False)
        
        # Logo
        logo = ctk.CTkLabel(sidebar, text="üç≥", font=("Arial", 40), fg_color=WHITE, 
                           corner_radius=50, width=70, height=70)
        logo.pack(pady=30)
        
        # Content area
        self.content = ctk.CTkFrame(main, fg_color=CREAM, corner_radius=0)
        self.content.pack(side="right", fill="both", expand=True, padx=30, pady=30)
        
        self.setup_nav()
        self.show_recipes()

    def setup_nav(self):
        # Navigation pills
        nav_frame = ctk.CTkFrame(self.content, fg_color=CREAM)
        nav_frame.pack(fill="x", pady=(0, 20))
        
        self.nav_buttons = []
        for text, cmd in [("RECIPES", self.show_recipes), ("MEAL PLANNER", self.show_meal_plan), 
                          ("INGREDIENTS", self.show_shopping)]:
            btn = ctk.CTkButton(nav_frame, text=text, fg_color=SAGE_GREEN, text_color="#333",
                               hover_color=DARK_GREEN, corner_radius=25, height=45, width=150,
                               font=("Arial", 13, "bold"), command=cmd)
            btn.pack(side="left", padx=10)
            self.nav_buttons.append(btn)
        
        # Tagline
        tagline = ctk.CTkLabel(self.content, text="Stay healthy and keep cooking with love!",
                              font=("Arial", 26), text_color="#333", fg_color=CREAM)
        tagline.pack(pady=20)

    def clear(self):
        for w in self.content.winfo_children()[2:]:  # Keep nav and tagline
            w.destroy()

    def show_recipes(self):
        self.clear()
        
        # Add Recipe Button
        btn_frame = ctk.CTkFrame(self.content, fg_color=CREAM)
        btn_frame.pack(fill="x", pady=10)
        ctk.CTkButton(btn_frame, text="+ Add New Recipe", fg_color=DARK_GREEN, 
                     text_color=WHITE, height=40, font=("Arial", 13, "bold"),
                     command=self.show_add_recipe).pack(side="left")
        
        # Search Bar
        search_frame = ctk.CTkFrame(self.content, fg_color=WHITE, corner_radius=10, 
                                   border_color=SAGE_GREEN, border_width=2)
        search_frame.pack(fill="x", pady=15)
        
        self.search_entry = ctk.CTkEntry(search_frame, placeholder_text="Search recipes...", 
                                        fg_color=WHITE, border_width=0, height=40)
        self.search_entry.pack(side="left", fill="x", expand=True, padx=15, pady=10)
        
        self.search_type = ctk.CTkComboBox(search_frame, values=["name","category","ingredient"], 
                                          width=120, fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.search_type.pack(side="left", padx=5)
        
        ctk.CTkButton(search_frame, text="Search", fg_color=DARK_GREEN, width=80,
                     command=self.search).pack(side="left", padx=5)
        ctk.CTkButton(search_frame, text="Refresh", fg_color=DARK_GREEN, width=80,
                     command=lambda: self.display_recipes(self.db.get_recipes())).pack(side="left", padx=(5,15))
        
        # Recipe List
        self.recipe_list = ctk.CTkScrollableFrame(self.content, fg_color=CREAM)
        self.recipe_list.pack(fill="both", expand=True, pady=10)
        self.display_recipes(self.db.get_recipes())

    def show_add_recipe(self):
        self.clear()
        
        scroll = ctk.CTkScrollableFrame(self.content, fg_color=CREAM)
        scroll.pack(fill="both", expand=True)
        
        # Form Container
        form = ctk.CTkFrame(scroll, fg_color=WHITE, corner_radius=12, 
                          border_color=SAGE_GREEN, border_width=2)
        form.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(form, text="Add New Recipe", font=("Arial", 22, "bold"), 
                    text_color=TEAL).pack(pady=20)
        
        # Form fields
        fields_frame = ctk.CTkFrame(form, fg_color=WHITE)
        fields_frame.pack(fill="x", padx=30, pady=10)
        
        self.widgets = {}
        
        ctk.CTkLabel(fields_frame, text="Recipe Name *", font=("Arial", 13, "bold"), 
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(10, 5))
        self.widgets["name"] = ctk.CTkEntry(fields_frame, height=40, border_color=SAGE_GREEN)
        self.widgets["name"].pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(fields_frame, text="Ingredients (comma separated) *", 
                    font=("Arial", 13, "bold"), text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 5))
        self.widgets["ingredients"] = ctk.CTkTextbox(fields_frame, height=100, border_color=SAGE_GREEN)
        self.widgets["ingredients"].pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(fields_frame, text="Instructions *", font=("Arial", 13, "bold"), 
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 5))
        self.widgets["instructions"] = ctk.CTkTextbox(fields_frame, height=150, border_color=SAGE_GREEN)
        self.widgets["instructions"].pack(fill="x", pady=(0, 15))
        
        # Details row
        details_row = ctk.CTkFrame(fields_frame, fg_color=WHITE)
        details_row.pack(fill="x", pady=10)
        
        left = ctk.CTkFrame(details_row, fg_color=WHITE)
        left.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(left, text="Category", font=("Arial", 13, "bold"), 
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 5))
        self.widgets["category"] = ctk.CTkComboBox(left, values=["Breakfast","Lunch","Dinner","Dessert","Snack"],
                                                   fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.widgets["category"].pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(left, text="Cook Time (min)", font=("Arial", 13, "bold"), 
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 5))
        self.widgets["time"] = ctk.CTkEntry(left, border_color=SAGE_GREEN)
        self.widgets["time"].pack(fill="x")
        
        right = ctk.CTkFrame(details_row, fg_color=WHITE)
        right.pack(side="right", fill="x", expand=True, padx=(10, 0))
        
        ctk.CTkLabel(right, text="Cuisine", font=("Arial", 13, "bold"), 
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 5))
        self.widgets["cuisine"] = ctk.CTkComboBox(right, values=["Indian","Italian","Chinese","Mexican","American","Thai","Other"],
                                                  fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.widgets["cuisine"].pack(fill="x")
        
        # Buttons
        btn_frame = ctk.CTkFrame(form, fg_color=WHITE)
        btn_frame.pack(fill="x", padx=30, pady=(10, 30))
        
        ctk.CTkButton(btn_frame, text="Save Recipe", fg_color=DARK_GREEN, height=45,
                     font=("Arial", 13, "bold"), command=self.save_recipe).pack(side="left", padx=10)
        ctk.CTkButton(btn_frame, text="Clear Form", fg_color="#D9534F", height=45,
                     font=("Arial", 13, "bold"), command=self.clear_form).pack(side="left")
        ctk.CTkButton(btn_frame, text="Back to Recipes", fg_color=SAGE_GREEN, height=45,
                     font=("Arial", 13, "bold"), command=self.show_recipes).pack(side="right", padx=10)

    def save_recipe(self):
        name = self.widgets["name"].get().strip()
        ing = self.widgets["ingredients"].get("1.0", "end-1c").strip()
        inst = self.widgets["instructions"].get("1.0", "end-1c").strip()
        cat = self.widgets["category"].get()
        cui = self.widgets["cuisine"].get()
        try:
            time = int(self.widgets["time"].get()) if self.widgets["time"].get().strip() else 0
        except:
            time = 0
        
        if not all([name, ing, inst]):
            return messagebox.showerror("Error", "Fill required fields!")
        
        if self.current_recipe:
            self.db.update_recipe(self.current_recipe[0], name, ing, inst, cat, cui, time)
            messagebox.showinfo("Success", "Recipe updated!")
        else:
            self.db.insert_recipe(name, ing, inst, cat, cui, time)
            messagebox.showinfo("Success", "Recipe saved!")
        
        self.clear_form()
        self.show_recipes()

    def clear_form(self):
        self.widgets["name"].delete(0, "end")
        self.widgets["ingredients"].delete("1.0", "end")
        self.widgets["instructions"].delete("1.0", "end")
        self.widgets["time"].delete(0, "end")
        self.current_recipe = None

    def search(self):
        term = self.search_entry.get().strip()
        self.display_recipes(self.db.get_recipes(term, self.search_type.get()))

    def display_recipes(self, recipes):
        for w in self.recipe_list.winfo_children():
            w.destroy()
        
        if not recipes:
            ctk.CTkLabel(self.recipe_list, text="No recipes found!", font=("Arial", 16),
                        text_color="#666").pack(pady=50)
            return
        
        for r in recipes:
            card = ctk.CTkFrame(self.recipe_list, fg_color=WHITE, corner_radius=12,
                              border_color=SAGE_GREEN, border_width=2)
            card.pack(fill="x", pady=10, padx=10)
            
            ctk.CTkLabel(card, text=r[1], font=("Arial", 18, "bold"), 
                        text_color=TEAL, anchor="w").pack(fill="x", padx=20, pady=(15, 5))
            
            meta = f"Category: {r[4]} | Cuisine: {r[5] or 'N/A'} | Time: {r[6] or 'N/A'} min"
            ctk.CTkLabel(card, text=meta, font=("Arial", 11), text_color="#666",
                        anchor="w").pack(fill="x", padx=20, pady=(0, 5))
            
            preview = r[2][:100] + "..." if len(r[2]) > 100 else r[2]
            ctk.CTkLabel(card, text=f"Ingredients: {preview}", font=("Arial", 11),
                        text_color="#666", anchor="w").pack(fill="x", padx=20, pady=(0, 15))
            
            btns = ctk.CTkFrame(card, fg_color=WHITE)
            btns.pack(fill="x", padx=20, pady=(0, 15))
            
            ctk.CTkButton(btns, text="View", fg_color=DARK_GREEN, width=80,
                         command=lambda r=r: self.view_recipe(r)).pack(side="left", padx=5)
            ctk.CTkButton(btns, text="Edit", fg_color=DARK_GREEN, width=80,
                         command=lambda r=r: self.edit_recipe(r)).pack(side="left", padx=5)
            ctk.CTkButton(btns, text="Delete", fg_color="#D9534F", width=80,
                         command=lambda r=r: self.delete_recipe(r)).pack(side="right", padx=5)

    def view_recipe(self, r):
        win = ctk.CTkToplevel(self.root)
        win.title(f"Recipe: {r[1]}")
        win.geometry("700x800")
        win.configure(fg_color=CREAM)
        
        scroll = ctk.CTkScrollableFrame(win, fg_color=CREAM)
        scroll.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(scroll, text=r[1], font=("Arial", 28, "bold"), 
                    text_color=TEAL).pack(pady=(0, 20))
        
        details = ctk.CTkFrame(scroll, fg_color=WHITE, corner_radius=10,
                             border_color=SAGE_GREEN, border_width=2)
        details.pack(fill="x", pady=(0, 20))
        
        for text in [f"Category: {r[4]}", f"Cuisine: {r[5] or 'N/A'}", f"Cook Time: {r[6] or 'N/A'} min"]:
            ctk.CTkLabel(details, text=text, font=("Arial", 14), 
                        text_color="#333", anchor="w").pack(fill="x", padx=20, pady=8)
        
        ctk.CTkLabel(scroll, text="Ingredients:", font=("Arial", 18, "bold"),
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 8))
        ing_box = ctk.CTkTextbox(scroll, height=150, border_color=SAGE_GREEN)
        ing_box.pack(fill="x", pady=(0, 20))
        ing_box.insert("1.0", r[2])
        ing_box.configure(state="disabled")
        
        ctk.CTkLabel(scroll, text="Instructions:", font=("Arial", 18, "bold"),
                    text_color=TEAL, anchor="w").pack(fill="x", pady=(0, 8))
        inst_box = ctk.CTkTextbox(scroll, height=200, border_color=SAGE_GREEN)
        inst_box.pack(fill="x", pady=(0, 20))
        inst_box.insert("1.0", r[3])
        inst_box.configure(state="disabled")

    def edit_recipe(self, r):
        self.current_recipe = r
        self.show_add_recipe()
        self.widgets["name"].insert(0, r[1])
        self.widgets["ingredients"].insert("1.0", r[2])
        self.widgets["instructions"].insert("1.0", r[3])
        self.widgets["category"].set(r[4])
        self.widgets["cuisine"].set(r[5] or "")
        self.widgets["time"].insert(0, str(r[6]) if r[6] else "")

    def delete_recipe(self, r):
        if messagebox.askyesno("Confirm", f"Delete '{r[1]}'?"):
            self.db.delete_recipe(r[0])
            messagebox.showinfo("Success", "Deleted!")
            self.display_recipes(self.db.get_recipes())

    def show_meal_plan(self):
        self.clear()
        
        # Add Meal Form
        form = ctk.CTkFrame(self.content, fg_color=WHITE, corner_radius=12,
                          border_color=SAGE_GREEN, border_width=2)
        form.pack(fill="x", pady=15)
        
        form_inner = ctk.CTkFrame(form, fg_color=WHITE)
        form_inner.pack(padx=30, pady=20)
        
        ctk.CTkLabel(form_inner, text="Add Meal to Plan", font=("Arial", 18, "bold"),
                    text_color=TEAL).grid(row=0, column=0, columnspan=4, pady=(0, 20))
        
        ctk.CTkLabel(form_inner, text="Day:", font=("Arial", 13, "bold"), 
                    text_color=TEAL).grid(row=1, column=0, padx=10, sticky="w")
        self.day_combo = ctk.CTkComboBox(form_inner, values=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],
                                        width=150, fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.day_combo.grid(row=1, column=1, padx=10)
        
        ctk.CTkLabel(form_inner, text="Meal:", font=("Arial", 13, "bold"),
                    text_color=TEAL).grid(row=1, column=2, padx=10, sticky="w")
        self.meal_combo = ctk.CTkComboBox(form_inner, values=["Breakfast","Lunch","Dinner"],
                                         width=150, fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.meal_combo.grid(row=1, column=3, padx=10)
        
        ctk.CTkLabel(form_inner, text="Recipe:", font=("Arial", 13, "bold"),
                    text_color=TEAL).grid(row=2, column=0, padx=10, pady=(15, 0), sticky="w")
        self.recipe_combo = ctk.CTkComboBox(form_inner, width=300, fg_color=SAGE_GREEN, button_color=DARK_GREEN)
        self.recipe_combo.grid(row=2, column=1, columnspan=2, padx=10, pady=(15, 0))
        
        ctk.CTkButton(form_inner, text="Add to Plan", fg_color=DARK_GREEN, height=40,
                     font=("Arial", 13, "bold"), command=self.add_meal).grid(row=2, column=3, padx=10, pady=(15, 0))
        
        # Weekly Plan Display
        self.plan_display = ctk.CTkScrollableFrame(self.content, fg_color=CREAM)
        self.plan_display.pack(fill="both", expand=True, pady=15)
        
        self.refresh_recipes()
        self.refresh_plan()

    def refresh_recipes(self):
        recipes = self.db.get_recipes()
        names = [f"{r[1]} (ID: {r[0]})" for r in recipes]
        self.recipe_combo.configure(values=names if names else ["No recipes"])
        if names:
            self.recipe_combo.set(names[0])

    def add_meal(self):
        try:
            rid = int(self.recipe_combo.get().split("ID: ")[1].split(")")[0])
            self.db.add_meal(self.day_combo.get(), self.meal_combo.get(), rid)
            messagebox.showinfo("Success", "Added!")
            self.refresh_plan()
        except:
            messagebox.showerror("Error", "Add recipes first!")

    def refresh_plan(self):
        for w in self.plan_display.winfo_children():
            w.destroy()
        
        meals = self.db.get_meals()
        if not meals:
            ctk.CTkLabel(self.plan_display, text="No meal plan! Start planning.", 
                        font=("Arial", 16), text_color="#666").pack(pady=50)
            return
        
        plan = {}
        for day, meal, name, rid in meals:
            plan.setdefault(day, {})[meal] = name
        
        for day in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']:
            if day in plan:
                day_frame = ctk.CTkFrame(self.plan_display, fg_color=WHITE, corner_radius=12,
                                       border_color=PURPLE, border_width=2)
                day_frame.pack(fill="x", pady=10, padx=10)
                
                ctk.CTkLabel(day_frame, text=day, font=("Arial", 20, "bold"),
                            text_color=TEAL).pack(pady=15)
                
                meals_grid = ctk.CTkFrame(day_frame, fg_color=WHITE)
                meals_grid.pack(fill="x", padx=20, pady=(0, 20))
                
                for i, meal in enumerate(['Breakfast','Lunch','Dinner']):
                    meal_slot = ctk.CTkFrame(meals_grid, fg_color=CREAM, corner_radius=10,
                                           border_color=SAGE_GREEN, border_width=2)
                    meal_slot.grid(row=0, column=i, padx=10, pady=10, sticky="nsew")
                    meals_grid.columnconfigure(i, weight=1, uniform="slot")
                    
                    ctk.CTkLabel(meal_slot, text=meal, font=("Arial", 14, "bold"),
                                text_color=TEAL).pack(pady=(15, 10))
                    
                    if meal in plan[day]:
                        ctk.CTkLabel(meal_slot, text=plan[day][meal], font=("Arial", 12),
                                    text_color="#333", wraplength=150).pack(pady=8)
                        ctk.CTkButton(meal_slot, text="Remove", fg_color="#D9534F", width=90, height=30,
                                     command=lambda d=day, m=meal: self.remove_meal(d, m)).pack(pady=(8, 15))
                    else:
                        ctk.CTkLabel(meal_slot, text="No meal", text_color="#999").pack(pady=30)

    def remove_meal(self, day, meal):
        if messagebox.askyesno("Confirm", f"Remove {day} {meal}?"):
            self.db.remove_meal(day, meal)
            messagebox.showinfo("Success", "Removed!")
            self.refresh_plan()

    def show_shopping(self):
        self.clear()
        
        ctk.CTkButton(self.content, text="Refresh List", fg_color=DARK_GREEN, height=45,
                     font=("Arial", 13, "bold"), command=self.refresh_shopping).pack(pady=15)
        
        self.shopping_frame = ctk.CTkScrollableFrame(self.content, fg_color=CREAM)
        self.shopping_frame.pack(fill="both", expand=True)
        self.refresh_shopping()

    def refresh_shopping(self):
        for w in self.shopping_frame.winfo_children():
            w.destroy()
        
        ingredients = self.db.get_shopping_list()
        if not ingredients:
            ctk.CTkLabel(self.shopping_frame, text="No ingredients! Plan meals first.",
                        font=("Arial", 16), text_color="#666").pack(pady=50)
            return
        
        list_frame = ctk.CTkFrame(self.shopping_frame, fg_color=WHITE, corner_radius=12,
                                 border_color=SAGE_GREEN, border_width=2)
        list_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(list_frame, text=f"Shopping List ({len(ingredients)} items)",
                    font=("Arial", 20, "bold"), text_color=TEAL).pack(pady=20)
        
        for i, ing in enumerate(ingredients, 1):
            item = ctk.CTkFrame(list_frame, fg_color=CREAM, corner_radius=8)
            item.pack(fill="x", padx=20, pady=5)
            ctk.CTkLabel(item, text=f"{i}. {ing}", font=("Arial", 13),
                        text_color="#333", anchor="w").pack(fill="x", padx=20, pady=12)

    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    app = RecipePlannerApp()
    app.run()
